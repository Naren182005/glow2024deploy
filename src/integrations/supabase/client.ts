
// This file is automatically generated. Do not edit it directly.
// Completely disable Supabase to prevent any initialization errors
console.log('ðŸ”’ Supabase disabled - App running in frontend-only mode');

// Create a completely safe mock client that never fails
const createSafeMockClient = () => {
  const mockAuth = {
    getSession: () => Promise.resolve({ data: { session: null }, error: null }),
    signInWithPassword: () => Promise.resolve({ data: { user: null, session: null }, error: new Error('Authentication disabled') }),
    signUp: () => Promise.resolve({ data: { user: null, session: null }, error: new Error('Authentication disabled') }),
    signOut: () => Promise.resolve({ error: null }),
    onAuthStateChange: (callback: any) => {
      // Call callback immediately with no session
      setTimeout(() => callback('SIGNED_OUT', null), 0);
      return {
        data: {
          subscription: {
            unsubscribe: () => console.log('Mock auth unsubscribed')
          }
        }
      };
    }
  };

  const mockFrom = () => ({
    select: () => Promise.resolve({ data: [], error: null }),
    insert: () => Promise.resolve({ data: null, error: new Error('Database disabled') }),
    update: () => Promise.resolve({ data: null, error: new Error('Database disabled') }),
    delete: () => Promise.resolve({ data: null, error: new Error('Database disabled') }),
    eq: () => mockFrom(),
    order: () => mockFrom(),
    single: () => Promise.resolve({ data: null, error: new Error('Database disabled') })
  });

  return {
    auth: mockAuth,
    from: mockFrom
  };
};

// Always use mock client - no real Supabase initialization
export const supabase = createSafeMockClient() as any;

// Always disabled to prevent any Supabase usage
export const isSupabaseEnabled = false;
